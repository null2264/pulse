name: Alpha builds

on:
  workflow_dispatch:
    inputs:
      bumpVersion:
        type: boolean
        description: Bump version before building
        default: true

jobs:
  build-data:
    name: Generate build data
    runs-on: ubuntu-latest
    outputs:
      build_date: ${{ steps.data.outputs.builddate }}
      version: ${{ steps.data.outputs.version }}
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml', '*/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Setup gluon
        run: |
          npm i -g gluon-build@next

      - name: Bump version
        if: ${{ inputs.bumpVersion }}
        run: |
          pnpm gluon ci --brand alpha --bump prerelease

      - name: Brand
        if: ${{ !inputs.bumpVersion }}
        run: |
          pnpm gluon ci --brand alpha

      - name: Debug
        run: |
          gluon get version
          gluon get version | xargs
          echo "$(gluon get version | xargs)"

      - name: Export release date
        id: data
        shell: bash
        run: |
          echo "builddate=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT
          echo "version=$(gluon get version | xargs)" >> $GITHUB_OUTPUT

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'chore: Update version to ${{ steps.data.outputs.version }}'
          commit_user_name: Z3R0
          commit_user_email: palembani@gmail.com

  source:
    runs-on: ubuntu-latest
    needs: [build-data]

    steps:
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup git
        run: |
          git config --global user.email "null2264@users.noreply.github.com"
          git config --global user.name "null2264"

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml', '*/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Load gluon CI setup
        run: pnpm gluon ci --brand alpha --display-version ${{ needs.build-data.outputs.version }}

      - name: Download firefox source and dependancies
        run: pnpm download --verbose

      - name: Import
        run: pnpm imp --verbose

      - name: Compress
        run: |
          cd engine
          # -h is used to dereference symlinks
          tar --use-compress-program=zstd -hcf ../pulse-browser.source.tar.gz .
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: pulse-browser.source.tar.gz
          path: ./pulse-browser.source.tar.gz

  linux:
    runs-on: ubuntu-latest
    needs: [source, build-data]

    steps:
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - uses: actions/checkout@v4
        with:
          submodules: recursive

        # Give the runner some swap space in an attempt to stop gkrust from crashing the build
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 6

      - name: Setup git
        run: |
          git config --global user.email "null2264@users.noreply.github.com"
          git config --global user.name "null2264"

      - name: Install system dependencies
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get update
          sudo apt-get install dos2unix yasm nasm build-essential libgtk2.0-dev libpython3-dev m4 uuid libasound2-dev libcurl4-openssl-dev libdbus-1-dev libdrm-dev libdbus-glib-1-dev libdbus-glib-1-dev libgtk-3-dev libpulse-dev libx11-xcb-dev libxt-dev xvfb lld llvm
          pip install pycairo testresources

      - name: Disable wasm sandboxing for the sake of my sanity
        run: |
          echo "ac_add_options --without-wasm-sandboxed-libraries" >> mozconfig

      - name: Free up space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Install sccache
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Save sccache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: /home/runner/.cache/sccache
          key: ${{ runner.os }}-sccache

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml', '*/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Load gluon CI setup
        run: pnpm gluon ci --brand alpha --display-version ${{ needs.build-data.outputs.version }}

      - name: Download source
        uses: actions/download-artifact@v3
        with:
          name: pulse-browser.source.tar.gz

      - name: Unpack source
        shell: bash
        run: |
          rm -rf engine
          mkdir engine
          tar -xf pulse-browser.source.tar.gz -C ./engine

      - name: Bootstrap
        run: |
          cd engine
          ./mach --no-interactive bootstrap --application-choice browser
          cd ..

      - name: Gluon build
        run: pnpm build --verbose --skip-patch-check

      - name: Package
        run: pnpm package

      - name: Rename artifacts
        run: |
          mv dist/pulse-browser-*.tar.bz2 "pulse-browser.linux.tar.bz2"
          mv dist/output.mar linux.mar

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: pulse-browser.linux.tar.bz2
          path: ./pulse-browser.linux.tar.bz2

      - name: Upload mar
        uses: actions/upload-artifact@v3
        with:
          name: linux.mar
          path: ./linux.mar

      - name: Upload update manifests
        uses: actions/upload-artifact@v3
        with:
          name: linux_update_manifest
          path: ./dist/update

  mac:
    runs-on: macos-13
    needs: [source, build-data]

    steps:
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup git
        run: |
          git config --global user.email "null2264@users.noreply.github.com"
          git config --global user.name "null2264"

      - name: Install system dependencies
        run: |
          brew install cairo sccache gnu-tar mercurial watchman
          sudo pip install setuptools

      - name: Force usage fo gnu-tar
        run: |
          echo 'export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"' >> ~/.bash_profile
          echo 'export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"' >> ~/.zsh
          source ~/.bash_profile

      - name: Save sccache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: ~/Library/Caches/Mozilla.sccache
          key: ${{ runner.os }}-sccache

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml', '*/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Load gluon CI setup
        run: pnpm gluon ci --brand alpha --display-version ${{ needs.build-data.outputs.version }}

      - name: Download source
        uses: actions/download-artifact@v3
        with:
          name: pulse-browser.source.tar.gz

      - name: Unpack source
        shell: bash
        run: |
          rm -rf engine
          mkdir engine
          tar -xf pulse-browser.source.tar.gz -C ./engine

      - name: Bootstrap
        run: |
          cd engine
          ./mach --no-interactive bootstrap --application-choice browser
          cd ..

      - name: Gluon build
        run: pnpm build --verbose --skip-patch-check

      - name: Package
        run: pnpm gluon package

      - name: Rename artifacts
        run: |
          mv ./dist/*.dmg "pulse-browser.macos.dmg"
          mv ./dist/output.mar macos.mar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: pulse-browser.macos.dmg
          path: ./pulse-browser.macos.dmg

      - name: Upload mar
        uses: actions/upload-artifact@v3
        with:
          name: macos.mar
          path: ./macos.mar

      - name: Upload update manifests
        uses: actions/upload-artifact@v3
        with:
          name: macos_update_manifest
          path: ./dist/update

  windows:
    runs-on: windows-latest
    needs: [source, build-data]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml', '*/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup MozillaBuild
        shell: bash
        run: |
          curl -L https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe --output MozillaBuildSetup-Latest.exe
          "/c/Program Files/7-Zip/7z.exe" x MozillaBuildSetup-Latest.exe -o/c/mozilla-build
          mkdir /c/mozilla-build/msys2/tmp

      - name: Install dependencies
        run: pnpm install

      - name: Load gluon CI setup
        run: pnpm gluon ci --brand alpha --display-version ${{ needs.build-data.outputs.version }}

      - name: Download source
        uses: actions/download-artifact@v3
        with:
          name: pulse-browser.source.tar.gz

      - name: Unpack source
        shell: bash
        run: |
          rm -rf engine
          mkdir engine
          tar -xf pulse-browser.source.tar.gz -C ./engine

      - name: Bootstrap
        shell: C:\mozilla-build\start-shell.bat -here -e {0}
        run: |
          cd engine
          ./mach --no-interactive bootstrap --application-choice browser
          cd ..

      - name: Gluon build
        shell: C:\mozilla-build\start-shell.bat -here -e {0}
        run: pnpm build --verbose --skip-patch-check

      - name: Package
        shell: C:\mozilla-build\start-shell.bat -here -e {0}
        run: |
          pnpm package
          mv ./dist/output.mar windows.mar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: pulse-browser.installer.exe
          path: ./dist/pulse-browser.installer.exe

      - name: Upload mar
        uses: actions/upload-artifact@v3
        with:
          name: windows.mar
          path: ./windows.mar

      - name: Upload update manifests
        uses: actions/upload-artifact@v3
        with:
          name: windows_update_manifest
          path: ./dist/update

  release:
    name: Release
    needs: [build-data, linux, source, mac, windows]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/alpha' && inputs.bumpVersion }}

    steps:
      - uses: actions/download-artifact@v3

      - name: Checksum artifacts
        run: |
          set -e

          sha=`sha256sum */pulse-browser.linux.tar.bz2 | awk '{ print $1 }'`
          echo "LINUX_SHA=$sha" >> $GITHUB_ENV

          sha=`sha256sum */pulse-browser.macos.dmg | awk '{ print $1 }'`
          echo "MAC_SHA=$sha" >> $GITHUB_ENV

          sha=`sha256sum */pulse-browser.installer.exe | awk '{ print $1 }'`
          echo "WINDOWS_SHA=$sha" >> $GITHUB_ENV

          sha=`sha256sum */pulse-browser.source.tar.gz | awk '{ print $1 }'`
          echo "SOURCE_SHA=$sha" >> $GITHUB_ENV

      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          name: 'Alpha build'
          tag_name: ${{ needs.build-data.outputs.version }}
          prerelease: true
          fail_on_unmatched_files: true
          body: |
            ---

            ### Checksums

            | Variant | SHA-256 |
            | ------- | ------- |
            | Linux (`pulse-browser.linux.tar.bz2`) | ${{ env.LINUX_SHA }} |
            | macOS (`pulse-browser.macos.dmg`) | ${{ env.MAC_SHA }} |
            | Windows (`pulse-browser.installer.exe`) | ${{ env.WINDOWS_SHA }} |
            | Source (`pulse-browser.source.tar.gz`) | ${{ env.SOURCE_SHA }} |
          files: |
            */pulse-browser.linux.tar.bz2
            */pulse-browser.source.tar.gz
            */pulse-browser.macos.dmg
            */pulse-browser.installer.exe
            */windows.mar
            */macos.mar
            */linux.mar

      - name: List
        run: find .

      - name: Checkout tools repo
        uses: actions/checkout@v4
        with:
          repository: null2264/pulse-updates
          path: updates
          token: ${{ secrets.ROBOT_TOKEN }}

      - name: Copy update manifests
        run: |
          mkdir -p updates/updates
          cp -a macos_update_manifest/. updates/updates/
          cp -a linux_update_manifest/. updates/updates/
          cp -a windows_update_manifest/. updates/updates/

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'chore: Upload update manifests ${{ needs.build-data.outputs.version }}'
          commit_user_name: Z3R0
          commit_user_email: palembani@gmail.com
          repository: ./updates
